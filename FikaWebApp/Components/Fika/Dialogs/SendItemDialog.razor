@using FikaShared.Requests

@inject ItemCacheService ItemCacheService

@* @bind-Value="_model.ItemName" *@

<MudDialog ContentStyle="overflow:hidden">
	<DialogContent>
		<MudStack Spacing="4">
			<MudText>Select an item and an amount to send</MudText>
			<MudStack Row>
				<MudAutocomplete T="string" Value="_model.ItemName" ValueChanged="GetImage" Variant="Variant.Filled" Label="Item" Placeholder="Select an item..." SearchFunc="Search"
								 MaxItems="100" Dense Clearable Modal ResetValueOnEmptyText ShowProgressIndicator="_searching" SelectValueOnTab Required />
				<MudImage Src="@_img" Alt="@_model.ItemName" Elevation="20" Width="64" Height="64" />
			</MudStack>
			<MudNumericField @bind-Value="@_model.Amount" Placeholder="How many items to send" Min="1" Max="9999" Adornment="Adornment.End" AdornmentText="item(s)" />
			<FikaMultiLineTextField @bind-Value="@_model.Message" />
			<MudStack Row>
				<MudCheckBox Label="Found In Raid" @bind-Value="_model.FoundInRaid" Color="Color.Primary" />
				<MudCheckBox Label="Specific Date" @bind-Value="_model.UseDate" Color="Color.Info" />
			</MudStack>
			<MudDatePicker Label="Send Date" Editable="true" @bind-Date="_model.Date" Placeholder="Select Date" Disabled="!_model.UseDate" IsDateDisabledFunc="CheckDate" ImmediateText />
			<MudTimePicker Label="Send Time" Editable="true" @bind-Time="_time" Placeholder="Select Time" Disabled="!_model.UseDate" MinuteSelectionStep="5" ImmediateText />
		</MudStack>
	</DialogContent>
	<DialogActions>
		<MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CheckCircle" Disabled="CanConfirm" OnClick="Confirm">Confirm</MudButton>
		<MudButton Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Cancel" OnClick="Cancel">Cancel</MudButton>
	</DialogActions>
</MudDialog>

@code {
	[CascadingParameter]
	private IMudDialogInstance MudDialog { get; set; }

	private SendItemModel _model = new();
	private TimeSpan? _time;
	private bool _searching;
	private string _img = _defaultImg;

	private static readonly string _defaultImg = "images/fika_logo.png";

	private bool CanConfirm
	{
		get
		{
			if (string.IsNullOrEmpty(_model.ItemName))
			{
				return true;
			}

			return _model.UseDate && (_model.Date == null || _time == null);
		}
	}

	private void Confirm()
	{
		_model.Date = _model.Date + _time;
		MudDialog.Close(_model);
	}

	private void Cancel()
	{
		MudDialog.Cancel();
	}

	public class SendItemModel
	{
		public string ItemName { get; set; } = string.Empty;
		public string TemplateId { get; set; } = string.Empty;
		public int Amount { get; set; } = 1;
		public string Message { get; set; } = string.Empty;
		public bool FoundInRaid { get; set; } = true;

		public bool UseDate { get; set; }
		public DateTime? Date { get; set; }
	}

	private bool CheckDate(DateTime dt)
	{
		return dt < DateTime.Now.AddDays(-1);
	}

	private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
	{
		_searching = true;

		if (string.IsNullOrEmpty(value))
		{
			_searching = false;
			return ItemCacheService.Items.Values;
		}

		var result = await Task.Run(() => ItemCacheService.NameToIdSearch(value), token);

		_searching = false;
		return result;
	}

	private void GetImage(string args)
	{
		_model.ItemName = args;
		if (string.IsNullOrEmpty(args))
		{
			_img = _defaultImg;
			return;
		}

		var tpl = ItemCacheService.NameToId(args);
		if (Statics.IsValidMongoId(tpl))
		{
			_img = $"https://assets.tarkov.dev/{tpl}-icon.webp";
			_model.TemplateId = tpl;
			StateHasChanged();
		}
	}
}
